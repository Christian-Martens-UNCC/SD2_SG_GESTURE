# -*- coding: utf-8 -*-
"""GUI_draft.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hNmP3J7-ggcggA9hjsz4afqqpmt89r6j
"""

import cv2
import tkinter as tk
from tkinter import *
from PIL import Image,ImageTk
from datetime import datetime
from tkinter import messagebox, filedialog

#----------------------------------
import mediapipe as mp
#import os
#from fn_try_gpu import *
#from fn_model_1_3 import *
import time
#import HandTrackingModule as htm
#----------------------------------

mp_drawing = mp.solutions.drawing_utils
mp_hands = mp.solutions.hands

def CreateWidgets():
    root.cameraLabel = Label(root,
                             bg="steelblue",
                             borderwidth=3,
                             relief="groove")
    root.cameraLabel.grid(row=2, column=1, 
                          padx=10, pady=10, 
                          columnspan=2)
    
    root.instructionLabel = Label(root,
                            bg="steelblue",
                            fg="white",
                            text="Instructions for Hand Gesture:",
                            font=('Times New Roman', 20),
                            borderwidth=3,
                            relief="groove")
    root.instructionLabel.grid(row=1, column=4,
                               padx=10, pady=10,
                               columnspan=2)
        
    root.CAMBTN = Button(root,
                         text="Camera Status: ON",
                         command=CamStop,
                         bg="LIGHTBLUE",
                         font=('Times New Roman', 15),
                         width=15)
    root.CAMBTN.grid(row=4, column=1)
    
    ShowFeed()

def ShowFeed():
    
    ret, frame = root.cap.read()
    x,y,c = frame.shape
    hands = mp_hands.Hands(max_num_hands=1, min_detection_confidence=0.8, min_tracking_confidence=0.5)
    
    results = hands.process(frame)
        
    if results.multi_hand_landmarks:
        for hlms in results.multi_hand_landmarks:
#           for lm in hlms.landmark:
                
            mp_drawing.draw_landmarks(frame, hlms,
                                      mp_hands.HAND_CONNECTIONS,
                                      mp_drawing.DrawingSpec(color=(0, 0, 255), thickness=2, circle_radius=4),
                                      mp_drawing.DrawingSpec(color=(0, 153, 153), thickness=2, circle_radius=2))
    if ret:
        
        ccFrame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGBA)
        ccImg = Image.fromarray(ccFrame)
        imgTk = ImageTk.PhotoImage(image=ccImg)
        root.cameraLabel.configure(image=imgTk)
        root.cameraLabel.imgTk = imgTk
        root.cameraLabel.after(40,ShowFeed)
    if not ret:
        root.cameraLabel.configure(image='')

# Define function for turning CAM off
def CamStop():
    # Release camera device and update button
    root.cap.release()
    root.CAMBTN.config(text="Camera Status: OFF",
                       command=CamStart)
    # Replace cameraLabel with text
    root.cameraLabel.config(text="Camera is OFF",
                            font=('Times New Roman',
                                  50))

def CamStart():
    # Recreate VideoCapture object for RaspberryPi Camera
    root.cap = cv2.VideoCapture('nvarguscamerasrc ! video/x-raw(memory:NVMM), width=640, height=480, format=(string)NV12, framerate=(fraction)20/1 ! nvvidconv flip-method=2 ! video/x-raw, format=(string)BGRx ! videoconvert ! video/x-raw, format=(string)BGR ! appsink' , cv2.CAP_GSTREAMER)
    
    # DEBUG: Laptop Camera, comment out above or below 'root.cap'
    #root.cap = cv2.VideoCapture(0)
    
    # Setting width and height
#    width_cam, height_cam = 640, 480
#    root.cap.set(cv2.CAP_PROP_FRAME_WIDTH, width_cam)
#    root.cap.set(cv2.CAP_PROP_FRAME_HEIGHT, height_cam)
    
    # Configure camera button controls
    root.CAMBTN.config(text="Camera Status: ON",
                       command=CamStop)
    
    # Reset cameraLabel to showing feed state
    root.cameraLabel.config(text="")
    ShowFeed()

# Create GUI object
root = tk.Tk()

root.cap = cv2.VideoCapture('nvarguscamerasrc ! video/x-raw(memory:NVMM), width=640, height=480, format=(string)NV12, framerate=(fraction)20/1 ! nvvidconv flip-method=2 ! video/x-raw, format=(string)BGRx ! videoconvert ! video/x-raw, format=(string)BGR ! appsink' , cv2.CAP_GSTREAMER)

#DEBUG: Laptop Camera, comment out above or below 'root.cap'
#root.cap = cv2.VideoCapture(0)



# This snippet prevents camera from loading up
# width, height = 640, 480
# root.cap.set(cv2.CAP_PROP_FRAME_WIDTH, width)
# root.cap.set(cv2.CAP_PROP_FRAME_HEIGHT, height)

# Format GUI window
root.title("SG_GESTURE GUI")
root.geometry("1920x1080")
root.resizable(True, True)
root.configure(background = "Gray")


CreateWidgets()

root.mainloop()

root.cap.release()

